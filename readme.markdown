"myplots" folder readme
========================

This folder contains all the code to plot elements, apertures and beams of the interaction regions of HL-LHC in 2D. For more detailed simulations (3D plots or tracking of many particles) see [FLUKA](http://www.fluka.org/fluka.php) or [SIXTRACK](http://sixtrack.web.cern.ch/SixTrack/) respectively.

"elements"
----------
The __"elements"__ folder is a module that transforms MAD-X output to input for a python plotting script to plot the LHC elements we choose. See the _readme_ in that folder to see how it works.

"aperture"
----------
The __"aperture"__ folder is a module that will transform MAD-X output to input for a python plotting script to plot the LHC inner apertures. Coming soon!.

"beams.py"
----------
 __"beams.py"__ plots the beams' trajectory and envelopes using survey. The functions defined there need two inputs:  ``def beam1x(survey,twisss)`` where:

*  ``survey`` is the survey file generated with MAD-X, generally with the name __"survey_lhcb1.tfs"__.

*  ``twisss`` is the twiss file generated with MAD-X, generally with the name __"coll_b1_ip#.tfs"__.

The code should look something like:
```python
import matplotlib
from matplotlib.pyplot import *
from matplotlib import rc
import sys
sys.path.append("../../")
import beams

beams.beam1x(r'madx/survey_lhcb1.tfs',r'madx/coll_b1_ip1.tfs')
beams.beam2x(r'madx/survey_lhcb2.tfs',r'madx/coll_b2_ip1.tfs')

show()
```
To see a full example check __"coll_IP#.py"__ in the __Experiments folders__ section.

"param.py"
----------
 __"param.py"__ plots the beam trajectory and a 5 sigma envelope in the x and y planes, as well as the beta functions and the effective angle. The functions __beamx__ and __beamy__ need four inputs ``def beamx(b1,b2,ipb1,ipb2):``: 
 
* ``b1`` is the __"param_b1_ip#.tfs"__ generated by MAD-X.
* ``b2`` is the __"param_b2_ip#.tfs"__ generated by MAD-X.
* ``ipb1`` is the  IP s(m) value for beam 1.
* ``ipb2`` is the  IP s(m) value for beam 2.
 
 
The __beta__ and __angle__ functions need only two inputs ``def beta(inputfile,ipb1)``:

* ``inputfile`` is the __"param_b1_ip#.tfs"__ generated by MAD-X.
* ``ipb1`` is the  IP s(m) value for beam 1.

The IP values are normally listed as tuples in the script. 

```python
import matplotlib
from matplotlib.pyplot import *
from matplotlib import rc
import sys
sys.path.append("../../")
import param

#IP s(m) values
t=(0,3332.436584,13329.28923,23315.37898,0,3332.284216,13329.59397,23315.22662)

# t[0]    0               IP1 (ATLAS) for B1
# t[1]    3332.436584     IP2 (ALICE) for B1
# t[2]    13329.28923     IP5 (CMS) for B1
# t[3]    23315.37898     IP8 (LHCb) for B1
# t[4]    0               IP1 (ATLAS) for B2
# t[5]    3332.284216     IP2 (ALICE) for B2
# t[6]    13329.59397     IP5 (CMS) for B2
# t[7]    23315.22662     IP8 (LHCb) for B2

param.beamx(r'madx/param_b1_ip1.tfs',r'madx/param_b2_ip1.tfs',t[2],t[6])
param.beamy(r'madx/param_b1_ip1.tfs',r'madx/param_b2_ip1.tfs',t[2],t[6])
param.beta(r'madx/param_b1_ip1.tfs',t[2])
param.angle(r'madx/param_b1_ip1.tfs',t[2])

show()
```
To see a full example check __"coll_params_IP#.py"__ in the __Experiments folders__ section.

Experiments folders
-------------------

The experiments folders (__"atlas"__, __"cms"__, __"lhcb"__ ) contain the following folders:

* __"Collision"__: contains the following scripts and folder:
	
    * __"coll_IP#.py"__: plots the interaction region at collision in the global reference system (with survey) using __"beams.py"__. It also plots the elements using __"elem.py"__ (see the __"elements"__ folder for more information).
		
    * __"coll_params_IP#.py"__: plots the beam trajectory and a 5 sigma envelope in the x and y planes, as well as the beta functions and the effective angle using __"param.py"__.

    * __"madx"__ folder: you can run MAD-X with the relevant optics files and generate the data (aperture, twiss and survey data). 
     
        To run MAD-X be sure to be connected to AFS or have it downloaded locally, and type:
    
        ```
        madx < coll_IP#.madx
        ```

        If you are not connected to AFS you won't be able to read the input files for MAD-X, but you can find the generated output in this repository.

        The __.madx__ files are properly commented.
	