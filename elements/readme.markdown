"elements" folder readme
=======================

The "elements" folder generates the .csv files that the Python script uses to plot elements and apertures, from a MAD-X output (.tfs).
The program will issue .csv files, with only the elements you choose.


Steps
-----

1. Put a MAD-X output file (i.e. tfs) in the folder __"in"__ with the following columns (in this order, if you want the plotting script to work properly):

    `NAME   S   L   APER_1  APER_2  APER_3  APER_4  APERTYPE`   

    You can add several files to this folder, for example one for beam 1 and one for beam 2.

2. Open __"regex.conf"__ and write there the elements you are interested in (that's the regex that the program will look for), and below the name you want to add to the output file. The program will issue the .csv file with a name like this: __"aperture_b1_nameofelement"__ and __"aperture_b2_nameofelement"__.

Example of content of "regex.conf":

                MBAW
                mbaw
                MBLW
                mblw
                MBRB
                mbrb
                MBRC
                mbrc
                MBRS
                mbrs
                MBW
                mbw
                MBWMD
                mbwmd
                MBX
                mbx
                MBXW
                mbxw
                MBXWH
                mbxwh
                MK
                mk
                MC
                mc
                MQXA
                mqxa
                MQXB
                mqxb
                B
                b
                V
                v
                TAN
                tan
                TAS
                tas
                TC
                tc


3. Once __"regex.conf"__ is written, you just have to run __"run.py"__, and the .csv files will be generated in the __"out"__ folder. Ready to be easily used by a Python script.



How to use the "elem.py" module
================================

The function "plotelem" consists of 4 parameters:

```python
def plotelem(inputfile,color,ip,elem):
```


inputfile
---------
Just write the path to the inputfile you want. Using this whole package you should use the files generated by our parser in the "out" folder, so just write: r'../../elements/out/' followed by the .csv you want.


color
-----
Will be defined in your plotting script. You can choose from there.


ip
---
Will be defined in your plotting script as a tuple, in this order:

```python
t[0]    0               IP1 (ATLAS) for B1
t[1]    3332.436584     IP2 (ALICE) for B1
t[2]    13329.28923     IP5 (CMS) for B1
t[3]    23315.37898     IP8 (LHCb) for B1
t[4]    0               IP1 (ATLAS) for B2
t[5]    3332.284216     IP2 (ALICE) for B2
t[6]    13329.59397     IP5 (CMS) for B2
t[7]    23315.22662     IP8 (LHCb) for B2
```

So for the "ip" parameter just write the correspondant tuple (t[0]...t[7]).



elem
----

This parameter serves to write another name of the element, in horizontal, bold and bigger font. This was thought in order to write a more colloquial name for the element (i.e. "Q1" instead of "MQXA").
Will be defined in your plotting script as a tuple, in this order:

```python
e[0]    D1              MBX, MBXW (in IR1 and IR5)      
e[1]    D2              MBRC
e[2]    D3              MBRS, MBW (in IR3 and IR7)
e[3]    D4              MBRB, MBW (in IR3 and IR7)  
e[4]    Q2              MQXB
e[5]    Spectrometer    MBAW (ALICE), MBLW (LHCb)
e[6]    Compensator     MBWMD (ALICE), MBXWH (LHCb) 
```

So for the "elem" parameter just write the correspondant tuple (e[0]...).


Of course the tuples can be modified in the plotting script to fit your needs.

For plotting elements that are quite abundant (vacuum elements or experimental pipes) it is better to use the function "plotv", which does not write the name of the element and does not overcharge the plot.
